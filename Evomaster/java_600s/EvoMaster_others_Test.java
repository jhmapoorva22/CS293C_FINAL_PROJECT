import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import static org.evomaster.client.java.controller.db.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import  java.util.List;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2022-03-11T01:49:28.003727-08:00[America/Los_Angeles]
 * <br>
 * The generated test suite contains 42 tests
 * <br>
 * Covered targets: 807
 * <br>
 * Used time: 0h 10m 1s
 * <br>
 * Needed budget for current results: 43%
 * <br>
 * This file contains test cases that represent failed calls, but not indicative of faults.
 */
public class EvoMaster_others_Test {

    
    private static final SutHandler controller = new em.embedded.eu.fayder.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test
    public void test_0() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v1/subregion/WUM_C86hhg%5C_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    @Test
    public void test_1() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v2/callingcode/cLv%5CA5lOiSVWcB")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    @Test
    public void test_2() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v1/lang/jfqlrn%5CeKOXn3rd")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    @Test
    public void test_3() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v2/region/w%5CQ759JYp54")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    @Test
    public void test_4() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v1/capital/%5C")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    @Test
    public void test_5() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v2/lang/D%5C")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    @Test
    public void test_6() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v1/name/%5Ch")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    @Test
    public void test_7() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v2/capital/u%5C?fields=a6WsBS")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    @Test
    public void test_8() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v1/alpha?codes=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Bad Request"));
        
    }
    
    
    @Test
    public void test_9() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v1/alpha/o")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Bad Request"));
        
    }
    
    
    @Test
    public void test_10() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v2/alpha?" + 
                    "fields=Vws4iNpxqiakD1l&" + 
                    "codes=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Bad Request"));
        
    }
    
    
    @Test
    public void test_11() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v2/alpha/M")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Bad Request"));
        
    }
    
    
    @Test
    public void test_12() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v2/alpha?" + 
                    "fields=6VmXQ4&" + 
                    "codes=M")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Bad Request"));
        
    }
    
    
    @Test
    public void test_13() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v1/alpha?codes=pd8TlgW")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Bad Request"));
        
    }
    
    
    @Test
    public void test_14() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v1/alpha?codes=P")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Bad Request"));
        
    }
    
    
    @Test
    public void test_15() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v1/currency/ArBRPKCJUpHM_N9")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Bad Request"));
        
    }
    
    
    @Test
    public void test_16() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v2/currency/OuswMBWfaB0yJh")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Bad Request"));
        
    }
    
    
    @Test
    public void test_17() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v2/alpha?codes=QwuEo7alEB4lwS6u")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Bad Request"));
        
    }
    
    
    @Test
    public void test_18() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v2/alpha/ytIcUm2TPtFXAiH?fields=D11oL")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Bad Request"));
        
    }
    
    
    @Test
    public void test_19() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v1/alpha/zwbnRYLr41m")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Bad Request"));
        
    }
    
    
    @Test
    public void test_20() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v2/capital/jZ")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
        
    }
    
    
    @Test
    public void test_21() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v2/lang/;1adM9wEG2GT?fields=S88PVK3l")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test
    public void test_22() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v1/alpha/TAW")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
        
    }
    
    
    @Test
    public void test_23() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v2/name/0wf3Zun1mHpTOaw?fullText=false")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
        
    }
    
    
    @Test
    public void test_24() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v2/callingcode/41nNbMnn?fields=JlSw0M1uLqyy7")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
        
    }
    
    
    @Test
    public void test_25() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v2/region/DMGODA7gWo3O?fields=X")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
        
    }
    
    
    @Test
    public void test_26() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v2/subregion/loFWiEClXPIVO?fields=840uktcL9BOXg")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
        
    }
    
    
    @Test
    public void test_27() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v2/lang/oU?fields=fEv36i")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
        
    }
    
    
    @Test
    public void test_28() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v2/lang/oxQ")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
        
    }
    
    
    @Test
    public void test_29() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v2/lang/tP4lVM?fields=XSb6uQvh0e")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
        
    }
    
    
    @Test
    public void test_30() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v2/alpha/P7")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
        
    }
    
    
    @Test
    public void test_31() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v2/demonym/UcIXz63?fields=VaUPlSvDlh")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
        
    }
    
    
    @Test
    public void test_32() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v1/currency/QMW")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
        
    }
    
    
    @Test
    public void test_33() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v1/region/jBOLXLKp1z5OM")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
        
    }
    
    
    @Test
    public void test_34() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v1/subregion/L7AywyHRCfxk")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
        
    }
    
    
    @Test
    public void test_35() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v1/capital/V4w53ltubfYc")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
        
    }
    
    
    @Test
    public void test_36() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v2/currency/82l?fields=npc192E_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
        
    }
    
    
    @Test
    public void test_37() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v1/callingcode/KXbWX9AnFUzjGhb")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
        
    }
    
    
    @Test
    public void test_38() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v1/lang/n")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
        
    }
    
    
    @Test
    public void test_39() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v2/name/2Y3heEMB?fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
        
    }
    
    
    @Test
    public void test_40() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/eAETWM3tTZfIUI")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
        
    }
    
    
    @Test
    public void test_41() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v1/name/Oy9")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
        
    }


}
